link numbers

# Box Plot

# ----------------------------------------------------------------

record boxData(min, max, mean, q1, median, q3, range)

# ----------------------------------------------------------------

procedure drawBoxPlot(w, bData)

  # Position & dimensions
  width := 700 ; height := 100
  leftX := 50 ; rightX := leftX + width
  topY := 50 ; botY := topY + height
  midY := topY + height / 2

  leftBox := (xs := calXs(leftX, width, bData))[1]
  rightBox := xs[2] ; medianX := xs[3]

  # Left
  DrawLine(w, leftX, topY, leftX, botY)
  DrawLine(w, leftX, midY, leftBox, midY)

  # Right
  DrawLine(w, rightBox, midY, rightX, midY)
  DrawLine(w, rightX, topY, rightX, botY)

  # Median & Box
  DrawLine(w, medianX, topY, medianX, botY)
  DrawRectangle(w, leftBox, topY, rightBox - leftBox, height)

end

procedure calPosX(left, width, bData, s)
  return left + (bData[s] - bData.min) * width / bData.range
end

procedure calXs(leftX, width, bData)

  return {
    xs := list(3); ks := ["q1", "q3", "median"]
    every i := 1 to 3 do
      xs[i] := calPosX(leftX, width, bData, ks[i]); xs
  }

end

procedure showData(bData)

  write("Min: ", bData.min, n := "\n",
        "Max: ", bData.max, n,
        "Mean: ", bData.mean, n,
        "Q1: ", bData.q1, n,
        "Median: ", bData.median, n,
        "Q3: ", bData.q3, n,
        "Range: ", bData.range)

end

# ----------------------------------------------------------------

procedure median(sortedData)
  return(percentile(sortedData, 50))
end

procedure percentile(sortedData, n)

  return if 0 = (m := n * (*sortedData + 1)) % (h := 100) then
    sortedData[m / h] else
    amean(sortedData[floor(d := div(m, h))],
          sortedData[ceil(d)])

end

# ----------------------------------------------------------------

procedure calculate(d)

  return {

    (bData := boxData()).range :=
      (bData.max := (d := sort(d))[*d]) -
      (bData.min := d[1])

    bData.q1 := percentile(d, 25)
    bData.median := median(d)
    bData.q3 := percentile(d, 75)
    bData.mean := mean(d); bData

  }

end

procedure mean(L)
   return div({ s := 0; every s +:= !L; s }, *L)
end

# ----------------------------------------------------------------

procedure main()

  w := open("Box Plot", "g")

  # Create data
  data := list(numData := 100)
  every i := 1 to numData do data[i] := ?1e3

  # Perform calculations and display box data
  showData(bData := calculate(data))

  # Draw box plot
  drawBoxPlot(w, bData)
  WSync()

  delay(5e3)

  close(w)

end

# ----------------------------------------------------------------

