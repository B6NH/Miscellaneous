link numbers

# Histogram

# ----------------------------------------------------------------

record histogramData(range,bars,width,limits,frequencies)

# ----------------------------------------------------------------

procedure getHistogramData(d)

  return {
    (hd := histogramData()).frequencies :=
    getFrequencies(
      hd.bars := round(sqrt(*d)),
      hd.limits :=
        getLimits(
          hd.bars, mi := d[1] - (h := 0.5),
          hd.width :=
             div(hd.range := d[*d] + h - mi, hd.bars)),
      d); hd
  }

end

procedure drawHistogram(h, w)

  # Generate histogram
  x := 10 ; d := 55; scale := 12; y := 10; rWidth := 50
  every i := 1 to h.bars do {
    DrawRectangle(w, x, y, rWidth, h.frequencies[i] * scale)
    x +:= d
  }

end

procedure showData(h)

  write("Range: ", h.range, n := "\n",
        "Width: ", h.width, n,
        "Bars: ", h.bars)

  writes("Limits: ") ; every writes(!h.limits, s := " ") ; write()
  writes("Frequencies: ") ; every writes(!h.frequencies, s) ; write()

end

# ----------------------------------------------------------------

procedure createSortedData(s)

  # Generate data
  return sort({ d := list(s); every i := 1 to s do d[i] := ?100; d })

end

procedure getLimits(bars, mi, width)

  # Calculate limits
  return {
    (lms := list(bars + 1))[1] := mi
      every i := 2 to *lms do
        lms[i] := round(lms[i - 1] + width); lms
  }

end

procedure getFrequencies(bars, limits, d)

  # Calculate frequencies
  return {
    fqs := list(bars, 0) ; fIndex := 1
    every v := !d do
      (if v <= limits[fIndex + 1] then
        fqs[fIndex] else
        fIndex)
      +:= 1; fqs
  }

end

# ----------------------------------------------------------------

procedure main()

  w := open("Histogram", "g")

  # Generate s values
  d := createSortedData(s := 100)

  # Calculate histogram properties
  h := getHistogramData(d)

  # Display histogram
  drawHistogram(h, w)
  WSync()

  # Display data on command line
  showData(h)

  delay(5e3)

  close(w)

end

# ----------------------------------------------------------------

